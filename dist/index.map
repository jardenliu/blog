{"version":3,"sources":["index.js"],"names":["getGithubArticleConfig","url","result","updatedDate","rawUrl","config","axios","get","then","res","status","pageStr","data","rawUrlStrArr","match","length","dateTimeStrArr","Object","assign","getGithubArticleContent","fetchGithubArticles","articles","i","art","cfg","content","prototype","toString","call","articleConfigs","process","exit","fetchArticles","githubArticles","filter","type","githubArts","articleDatebase","fs","writeFileSync","JSON","stringify","catch","err","console","log"],"mappings":"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","file":"index.map","sourceRoot":"../src/fecth","sourcesContent":["import axios from 'axios'\nimport fs from 'fs'\nimport articleConfigs from '../../articles.json'\n\nconst getGithubArticleConfig = async (url) => {\n  let result = {\n    updatedDate: false,\n    rawUrl: ''\n  }\n\n  let config = await axios.get(url).then(res => {\n    if (res.status == 200) {\n      let pageStr = res.data\n      let rawUrlStrArr = pageStr.match(/(?<=id=\\\"raw-url\\\".*href=\\\").*(?=\\\">Raw<\\/a>)/g)\n      let rawUrl = rawUrlStrArr && rawUrlStrArr.length > 0 ? 'https://github.com' + rawUrlStrArr[0] : false\n      let dateTimeStrArr = pageStr.match(/(?<=datetime=\\\").*(?=\\\">)/g)\n      let updatedDate = dateTimeStrArr && dateTimeStrArr.length > 0 ? dateTimeStrArr[0] : ''\n      return {\n        rawUrl,\n        updatedDate\n      }\n    }\n  })\n\n  return Object.assign({}, result, config)\n}\n\nconst getGithubArticleContent = async (url) => {\n  if (!url || typeof url !== 'string') {\n    return ''\n  }\n  let result = await axios.get(url).then(res => {\n    if (res.status == 200) {\n      return res.data\n    }\n    return ''\n  })\n  return result\n}\n\n\n\nconst fetchGithubArticles = async (articles) => {\n  for (let i = 0; i < articles.length; i++) {\n    let art = articles[i]\n    let cfg = await getGithubArticleConfig(art.url)\n    art.content = await getGithubArticleContent(cfg.rawUrl)\n    articles[i] = { ...art, ...cfg }\n  }\n\n  return articles\n}\n\nif (Object.prototype.toString.call(articleConfigs) !== '[object Array]') {\n  process.exit(0)\n}\n\nconst fetchArticles = async (config) => {\n  let githubArticles = config.filter(art => art.type === 'github')\n\n  let githubArts = await fetchGithubArticles(githubArticles)\n\n  let articleDatebase = [...githubArts]\n\n  fs.writeFileSync('./database.json', JSON.stringify(articleDatebase))\n}\n\nfetchArticles(articleConfigs).catch(err => console.log(err))\n\n\n\n"]}